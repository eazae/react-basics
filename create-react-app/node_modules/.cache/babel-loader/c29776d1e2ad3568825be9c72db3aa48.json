{"ast":null,"code":"var _jsxFileName = \"/Users/uniqlear/Documents/React/react-basics/create-react-app/src/App6.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* create-react-app 프로젝트를 기반으로 한 코드. 따로 이 폴더로 빼온 것 (실행 X) */\n\n/*//! Cleanup function: 특정 Component가 destroy될 때 실핻되는 함수 */\n// (자주 쓰이지는 않지만, 알아는 두자)\n\n/* 버튼을 누를 떄마다 Component하나를 보여주거나 숨기는 예제 */\nimport { useState, useEffect } from 'react'; // (recap: component는, 단지 JSX를 return하는 function에 불과! 그 이상 그 이하도 아니다)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Hello() {\n  _s();\n\n  // component가 처음 create(생성)될 때(첫 render때) 한번만 실행될 함수를 구현해두자\n  useEffect(() => {\n    console.log('CREATED :D'); //? ReactJS는, compoent가 destroy(!= hide)될 때 코드를 실행할 수 있도록 지원\n    //! => Cleanup function!\n    //* [방식] return a ** function **, from the function 'useEffect()'.\n\n    return () => console.log('DESTROYED :(');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 10\n  }, this);\n} // 위의 것을 다른 방식으로 구현 (그냥 따로 함수로 빼낸 것이 전부)\n// function Hello2() {\n//   function whenDestroyed() {\n//     console.log('component destroyed');\n//   }\n//   function whenCreated() {\n//     console.log('component created');\n//     return whenDestroyed;\n//   }\n//   useEffect(whenCreated, []);\n//   return <h1>Hello</h1>;\n// }\n// 위의 주석처리한 방식을 -> react.js 프로젝트에서 자주 보게 될 구조로 변환해보자\n//* 보통 위처럼 function으로 따로 빼지 않고, useEffect() 안에 다 작성하는 것이 일반적\n// 이 때 여기에서 또 2가지 방식이 있음(i. arrow functions VS ii. 일반 function())\n\n\n_s(Hello, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Hello;\n\nfunction Hello2() {\n  _s2();\n\n  // (2가지 방식 완전 동일, i.의 방식을 추천)\n  // i. annonymous arrow function\n  // 짧고 간결하다 (추천)\n  useEffect(() => {\n    console.log('hi');\n    return () => console.log('bye'); // return a function\n  }); // 일반 function (비추천)\n\n  useEffect(function () {\n    console.log('hi');\n    return function () {\n      console.log('bye');\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hello\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(Hello2, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c2 = Hello2;\n\nfunction App() {\n  _s3();\n\n  const [showing, setShowing] = useState(false);\n\n  const onClick = () => setShowing(prev => !prev);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showing ? /*#__PURE__*/_jsxDEV(Hello, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: showing ? 'Hide' : 'Show'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s3(App, \"ZGmcKw9rD9kShTa3xksTCmQA528=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Hello\");\n$RefreshReg$(_c2, \"Hello2\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/uniqlear/Documents/React/react-basics/create-react-app/src/App6.js"],"names":["useState","useEffect","Hello","console","log","Hello2","App","showing","setShowing","onClick","prev"],"mappings":";;;;;AAAA;;AAEA;AACA;;AACA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC,C,CAEA;;;;;AACA,SAASC,KAAT,GAAiB;AAAA;;AACf;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EADc,CAGd;AACA;AACA;;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,cAAZ,CAAb;AACD,GAPQ,EAON,EAPM,CAAT;AAQA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;GA7BSF,K;;KAAAA,K;;AA8BT,SAASG,MAAT,GAAkB;AAAA;;AAChB;AACA;AACA;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAO,MAAMD,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAb,CAFc,CAEmB;AAClC,GAHQ,CAAT,CAJgB,CAQhB;;AACAH,EAAAA,SAAS,CAAC,YAAY;AACpBE,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAO,YAAY;AACjBD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD,KAFD;AAGD,GALQ,CAAT;AAMA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IAhBQC,M;;MAAAA,M;;AAkBT,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;;AACA,QAAMS,OAAO,GAAG,MAAMD,UAAU,CAAEE,IAAD,IAAU,CAACA,IAAZ,CAAhC;;AAEA,sBACE;AAAA,eAGGH,OAAO,gBAAG,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAAH,GAAe,IAHzB,eAIE;AAAQ,MAAA,OAAO,EAAEE,OAAjB;AAAA,gBAA2BF,OAAO,GAAG,MAAH,GAAY;AAA9C;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AAQD;;IAZQD,G;;MAAAA,G;AAcT,eAAeA,GAAf","sourcesContent":["/* create-react-app 프로젝트를 기반으로 한 코드. 따로 이 폴더로 빼온 것 (실행 X) */\n\n/*//! Cleanup function: 특정 Component가 destroy될 때 실핻되는 함수 */\n// (자주 쓰이지는 않지만, 알아는 두자)\n/* 버튼을 누를 떄마다 Component하나를 보여주거나 숨기는 예제 */\nimport { useState, useEffect } from 'react';\n\n// (recap: component는, 단지 JSX를 return하는 function에 불과! 그 이상 그 이하도 아니다)\nfunction Hello() {\n  // component가 처음 create(생성)될 때(첫 render때) 한번만 실행될 함수를 구현해두자\n  useEffect(() => {\n    console.log('CREATED :D');\n\n    //? ReactJS는, compoent가 destroy(!= hide)될 때 코드를 실행할 수 있도록 지원\n    //! => Cleanup function!\n    //* [방식] return a ** function **, from the function 'useEffect()'.\n    return () => console.log('DESTROYED :(');\n  }, []);\n  return <h1>Hello</h1>;\n}\n\n// 위의 것을 다른 방식으로 구현 (그냥 따로 함수로 빼낸 것이 전부)\n// function Hello2() {\n//   function whenDestroyed() {\n//     console.log('component destroyed');\n//   }\n//   function whenCreated() {\n//     console.log('component created');\n//     return whenDestroyed;\n//   }\n\n//   useEffect(whenCreated, []);\n//   return <h1>Hello</h1>;\n// }\n\n// 위의 주석처리한 방식을 -> react.js 프로젝트에서 자주 보게 될 구조로 변환해보자\n//* 보통 위처럼 function으로 따로 빼지 않고, useEffect() 안에 다 작성하는 것이 일반적\n// 이 때 여기에서 또 2가지 방식이 있음(i. arrow functions VS ii. 일반 function())\nfunction Hello2() {\n  // (2가지 방식 완전 동일, i.의 방식을 추천)\n  // i. annonymous arrow function\n  // 짧고 간결하다 (추천)\n  useEffect(() => {\n    console.log('hi');\n    return () => console.log('bye'); // return a function\n  });\n  // 일반 function (비추천)\n  useEffect(function () {\n    console.log('hi');\n    return function () {\n      console.log('bye');\n    };\n  });\n  return <h1>Hello</h1>;\n}\n\nfunction App() {\n  const [showing, setShowing] = useState(false);\n  const onClick = () => setShowing((prev) => !prev);\n\n  return (\n    <>\n      {/* null -> Component를 destroy(화면에서 지워버리는 것)이기 때문에, 다시 show를 했을 때, useEffect() 부분이 다시 실행! */}\n      {/* 즉 create : destroy (hide가 아님!) */}\n      {showing ? <Hello /> : null}\n      <button onClick={onClick}>{showing ? 'Hide' : 'Show'}</button>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}